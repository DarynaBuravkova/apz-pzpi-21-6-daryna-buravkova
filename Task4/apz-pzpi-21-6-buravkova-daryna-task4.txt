1 ДІАГРАМА ПРЕЦЕДЕНТІВ

Моделювання клієнтської частини системи, яка надає застосунок для пошуку автоматів з кавою та замовлення напоїв, передбачає розгляд користувачів різних ролей, таких як адміністратор та звичайний клієнт. Кожен з цих користувачів має свої унікальні можливості та функціонал у системі. Всі можливі дії користувачів відображено на рисунку 1.
Адміністратор - це особа, яка відповідає за управління системою в цілому та роботою інших користувачів. Основні функціональні можливості адміністратора включають управління користувачами та автоматами, додавання нових кавових автоматів до системи, редагування інформації про існуючі автомати, видалення автоматів із системи, управління напоями та моніторинг. 
Адміністратор взаємодіє із системою через веб-клієнт або мобільний додаток для адміністраторів. Система надає інтерфейси для управління користувачами, автоматами, напоями та звітністю.
Звичайний клієнт - це основний користувач системи, який використовує її для перегляду інформації та замовлення напоїв. Основні функціональні можливості звичайного клієнта включають пошук автоматів, перегляд доступних напоїв, перегляд історії замовлень, залишення відгуків про напої та автомати
Клієнт використовує веб-клієнт для пошуку автоматів з кавою та напоїв. Система надає інтерфейси для пошуку автоматів, перегляду історії замовлень та залишення відгуків. Клієнт може переглядати відгуки та рейтинги інших користувачів, що допомагає у виборі напоїв.
Ці ролі та їх можливості допомагають системі працювати ефективно, забезпечуючи потрібний функціонал для кожного типу користувача.

2 СТРУКТУРА ПРОЕКТУ

Клієнтську частину програмної системи було розроблено  використовуючи сучасні технології та інструменти для забезпечення ефективності та якості програмного продукту. Розробка велася у середовищі Visual Studio Code.
Програмний код було написано на мові програмування JavaScript, з використанням бібліотеки React JS для реалізації користувацького інтерфейсу. React JS дозволив створити ефективний та динамічний веб-додаток, а також легко інтегрувався з іншими технологіями, що полегшило розширення та підтримку коду.
Для забезпечення зручності навігації та маршрутизації в додатку використовувалася бібліотека React Router. Це дозволило створити односторінкові додатки та ефективно управляти роутингом на клієнтському боці.
Взаємодія з серверною частиною системи здійснювалася безпосередньо за допомогою відповідних REST-запитів. Для цього використовувалися стандартні засоби мови JavaScript, такі як «fetch» або бібліотеки, які полегшують роботу з відправкою та отриманням даних через HTTP-запити.
Ця комбінація інструментів дозволяє забезпечити ефективність, гнучкість та швидкість розробки, а також створити інтерфейс, який легко масштабується та відповідає вимогам користувачів.
З метою візуалізації структури компонентів системи та їх взаємозв'язків була створена діаграма компонентів (див. рис.2).
Система використовує ряд компонентів для реалізації різноманітних функцій та забезпечення коректної взаємодії між її різними частинами. Ці компоненти співпрацюють між собою, створюючи функціонально повний та зручний для використання продукт. Вони можуть бути додані, розширені чи модифіковані в майбутньому для відповіді на розвиток системи та змінні потреби користувачів. Для візуалізації структури пакетів та їх взаємозв’язків була побудована діаграма пакетів (див.рис.3).
Створюваний проект, що використовує React JS, має типову структуру, із специфічним акцентом на веб-розробці та взаємодії з серверною частиною за допомогою REST-запитів. 
Каталог public містить статичні файли, які безпосередньо обслуговуються веб-сервером. Основний вміст цього каталогу включає:
  -index.html: головний HTML-файл, в який React додає свої скрипти. Він містить основну структуру HTML-документа та div-контейнер з id root, в який буде вбудовано React-додаток.
  -favicon.ico: іконка веб-сайту, яка відображається в заголовку браузера.
  -manifest.json: файл конфігурації веб-додатка, що використовується для визначення іконок, кольорів теми та інших властивостей прогресивного веб-додатка (PWA).
  -robots.txt: файл, що інструктує веб-краулери, як сканувати ваш сайт.
Каталог src є основним робочим каталогом для розробників, де розміщено весь вихідний код React-додатка. Його структура виглядає наступним чином:
  Каталог components
Цей каталог містить окремі компоненти React, які є будівельними блоками додатка. Компоненти можуть бути повторно використані в різних частинах програми. Структура включає:
  -Button.js: компонент кнопки.
  -Navbar.js: компонент навігаційної панелі.
  -Modal.js: компонент модального вікна.
Кожен компонент має свої стилі (CSS або SCSS файли) та допоміжні файли, зберігаючи їх поруч для зручності.
  Каталог pages
Каталог pages містить компоненти, що представляють окремі сторінки додатка. Вони складаються з інших компонентів та об'єднують їх для створення комплексних інтерфейсів. Приклади включають:
  -HomePage.js: головна сторінка.
  -CoffeePage.js: сторінка з переліком кавових напоїв.
  -CoffeeConcretePage.js: сторінка з деталями про конкретний кавовий напій.
  Стилі
Включені стилі в різних форматах:
  -App.css: основні стилі додатка.
  -index.css: глобальні стилі.
Конфігураційні файли знаходяться в кореневому каталозі проекту і забезпечують конфігурацію та управління залежностями проекту.
  -package.json: файл, що містить метадані про проект, включаючи ім'я, версію, залежності, скрипти для запуску і збірки проекту та іншу конфігураційну інформацію.
  -package-lock.json: файл, що фіксує конкретні версії залежностей для точного відтворення середовища розробки в майбутньому. Він гарантує, що при встановленні проекту будуть використані ті ж версії пакетів.
Залежності проекту включають різні бібліотеки та фреймворки, необхідні для розробки, тестування та збірки додатка. Основні з них:
  -react: бібліотека для побудови користувацького інтерфейсу.
  -react-dom: пакет для роботи з DOM у React.
  -react-router-dom: бібліотека для маршрутизації в React.
  -bootstrap: CSS-фреймворк для стилізації інтерфейсу.
  -axios або fetch: бібліотеки для виконання HTTP-запитів.
Використання React JS у поєднанні з сучасними інструментами та бібліотеками дозволив створити високоякісний, масштабований та підтримуваний веб-додаток. Структура проекту забезпечує організованість коду, полегшує розширення функціоналу та підтримку додатка в майбутньому.

3 ПОВЕДІНКА СИСТЕМИ

Для відстеження роботи системи, в якості актора було обрано адміністратора, оскільки поведінка системи зі сторони адміністратора може бути описана через різноманітні дії та можливості, які він має у системі (див. рис. 4).
Ця діаграма діяльності може служити інструментом для адміністратора для взаємодії з системою, а також для відстеження та керування різними аспектами її роботи. У контексті адміністрування системи важливо визначити, як адміністратор взаємодіє з користувальницьким інтерфейсом. У додатку А подано фрагменти програмного коду для функціональностей зі сторони адміністратора. Ці фрагменти коду ілюструють способи взаємодії адміністратора з системою через відповідні компоненти React. Реалізація функціоналу авторизації (приклад наведено у додатку Б) та управління користувачами (приклад наведено у додатку В) була конкретизована відповідно до особливостей системи та її вимог.

ВИСНОВКИ 

В ході виконання лабораторної роботи було розроблено клієнтську частину системи для моніторнгу та роботи з автоматами з кавою, використано технології React JS, Bootstrap, та react-router-dom. Застосування цих інструментів дозволило створити високоефективний та зручний інтерфейс для адміністратора.
Використання React JS дозволяє структурувати код, робити його більш модульним та легким для розширення. Bootstrap допомагає забезпечити відповідність дизайну та створює можливість швидкої реалізації стилів та компонентів. react-router-dom забезпечує навігацію між різними частинами системи.
Розроблена клієнтська частина є важливою складовою успішної програмної системи, що відповідає потребам та очікуванням користувачів.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ

Посилання на архів з кодом: 
Посилання на відео: 
